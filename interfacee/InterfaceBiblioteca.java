package interfacee;

import modelo.*;
import servico.SistemaBiblioteca;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Interface de console para intera√ß√£o com o sistema
 * Respons√°vel por toda a intera√ß√£o com o usu√°rio
 */
public class InterfaceBiblioteca {
    private SistemaBiblioteca sistema;
    private Scanner scanner;
    
    public InterfaceBiblioteca() {
        this.sistema = new SistemaBiblioteca();
        this.scanner = new Scanner(System.in);
    }
    
    /**
     * M√©todo principal que executa o sistema
     */
    public void executar() {
        System.out.println("=== SISTEMA DE GEST√ÉO DA BIBLIOTECA ACAD√äMICA ===");
        System.out.println("Bem-vindo ao sistema!");
        
        while (true) {
            exibirMenuPrincipal();
            int opcao = lerOpcao();
            
            switch (opcao) {
                case 1: menuLivros(); break;
                case 2: menuUsuarios(); break;
                case 3: menuEmprestimos(); break;
                case 4: menuRelatorios(); break;
                case 0: 
                    System.out.println("Obrigado por usar o sistema!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Op√ß√£o inv√°lida!");
            }
        }
    }
    
    // ========== M√âTODOS DE MENU ==========
    
    private void exibirMenuPrincipal() {
        System.out.println("\n" + criarLinha("=", 50));
        System.out.println("MENU PRINCIPAL");
        System.out.println(criarLinha("=", 50));
        System.out.println("1. Gerenciar Livros");
        System.out.println("2. Gerenciar Usu√°rios");
        System.out.println("3. Gerenciar Empr√©stimos");
        System.out.println("4. Relat√≥rios");
        System.out.println("0. Sair");
        System.out.print("Escolha uma op√ß√£o: ");
    }
    
    private void menuLivros() {
        while (true) {
            System.out.println("\n" + criarLinha("=", 30));
            System.out.println("GERENCIAR LIVROS");
            System.out.println(criarLinha("=", 30));
            System.out.println("1. Cadastrar Livro");
            System.out.println("2. Buscar Livro por ISBN");
            System.out.println("3. Buscar Livros por T√≠tulo");
            System.out.println("4. Listar Livros Dispon√≠veis");
            System.out.println("5. Listar Todos os Livros");
            System.out.println("0. Voltar");
            System.out.print("Escolha uma op√ß√£o: ");
            
            int opcao = lerOpcao();
            
            switch (opcao) {
                case 1: cadastrarLivro(); break;
                case 2: buscarLivroPorIsbn(); break;
                case 3: buscarLivrosPorTitulo(); break;
                case 4: listarLivrosDisponiveis(); break;
                case 5: listarTodosLivros(); break;
                case 0: return;
                default: System.out.println("Op√ß√£o inv√°lida!");
            }
        }
    }
    
    private void menuUsuarios() {
        while (true) {
            System.out.println("\n" + criarLinha("=", 30));
            System.out.println("GERENCIAR USU√ÅRIOS");
            System.out.println(criarLinha("=", 30));
            System.out.println("1. Cadastrar Aluno");
            System.out.println("2. Cadastrar Professor");
            System.out.println("3. Listar Todos os Usu√°rios");
            System.out.println("0. Voltar");
            System.out.print("Escolha uma op√ß√£o: ");
            
            int opcao = lerOpcao();
            
            switch (opcao) {
                case 1: cadastrarAluno(); break;
                case 2: cadastrarProfessor(); break;
                case 3: listarTodosUsuarios(); break;
                case 0: return;
                default: System.out.println("Op√ß√£o inv√°lida!");
            }
        }
    }
    
    private void menuEmprestimos() {
        while (true) {
            System.out.println("\n" + criarLinha("=", 30));
            System.out.println("GERENCIAR EMPR√âSTIMOS");
            System.out.println(criarLinha("=", 30));
            System.out.println("1. Realizar Empr√©stimo");
            System.out.println("2. Realizar Devolu√ß√£o");
            System.out.println("3. Listar Empr√©stimos Ativos");
            System.out.println("4. Listar Empr√©stimos por Usu√°rio");
            System.out.println("0. Voltar");
            System.out.print("Escolha uma op√ß√£o: ");
            
            int opcao = lerOpcao();
            
            switch (opcao) {
                case 1: realizarEmprestimo(); break;
                case 2: realizarDevolucao(); break;
                case 3: listarEmprestimosAtivos(); break;
                case 4: listarEmprestimosPorUsuario(); break;
                case 0: return;
                default: System.out.println("Op√ß√£o inv√°lida!");
            }
        }
    }
    
    private void menuRelatorios() {
        while (true) {
            System.out.println("\n" + criarLinha("=", 30));
            System.out.println("RELAT√ìRIOS");
            System.out.println(criarLinha("=", 30));
            System.out.println("1. Empr√©stimos Atrasados");
            System.out.println("2. Estat√≠sticas Gerais");
            System.out.println("0. Voltar");
            System.out.print("Escolha uma op√ß√£o: ");
            
            int opcao = lerOpcao();
            
            switch (opcao) {
                case 1: listarEmprestimosAtrasados(); break;
                case 2: exibirEstatisticas(); break;
                case 0: return;
                default: System.out.println("Op√ß√£o inv√°lida!");
            }
        }
    }
    
    // ========== M√âTODOS DE CADASTRO ==========
    
    private void cadastrarLivro() {
        System.out.println("\n--- CADASTRAR LIVRO ---");
        System.out.print("T√≠tulo: ");
        String titulo = scanner.nextLine();
        System.out.print("Autor: ");
        String autor = scanner.nextLine();
        System.out.print("ISBN: ");
        String isbn = scanner.nextLine();
        System.out.print("Ano: ");
        int ano = lerInteiro();
        System.out.print("Editora: ");
        String editora = scanner.nextLine();
        
        if (sistema.cadastrarLivro(titulo, autor, isbn, ano, editora)) {
            System.out.println("‚úÖ Livro cadastrado com sucesso!");
        } else {
            System.out.println("‚ùå Erro: Livro com este ISBN j√° existe!");
        }
    }
    
    private void cadastrarAluno() {
        System.out.println("\n--- CADASTRAR ALUNO ---");
        System.out.print("Nome: ");
        String nome = scanner.nextLine();
        System.out.print("Matr√≠cula: ");
        String matricula = scanner.nextLine();
        System.out.print("CPF: ");
        String cpf = scanner.nextLine();
        System.out.print("E-mail: ");
        String email = scanner.nextLine();
        
        if (sistema.cadastrarAluno(nome, matricula, cpf, email)) {
            System.out.println("‚úÖ Aluno cadastrado com sucesso!");
        } else {
            System.out.println("‚ùå Erro: Usu√°rio com esta matr√≠cula j√° existe!");
        }
    }
    
    private void cadastrarProfessor() {
        System.out.println("\n--- CADASTRAR PROFESSOR ---");
        System.out.print("Nome: ");
        String nome = scanner.nextLine();
        System.out.print("Matr√≠cula: ");
        String matricula = scanner.nextLine();
        System.out.print("CPF: ");
        String cpf = scanner.nextLine();
        System.out.print("E-mail: ");
        String email = scanner.nextLine();
        
        if (sistema.cadastrarProfessor(nome, matricula, cpf, email)) {
            System.out.println("‚úÖ Professor cadastrado com sucesso!");
        } else {
            System.out.println("‚ùå Erro: Usu√°rio com esta matr√≠cula j√° existe!");
        }
    }
    
    // ========== M√âTODOS DE CONSULTA ==========
    
    private void buscarLivroPorIsbn() {
        System.out.print("Digite o ISBN: ");
        String isbn = scanner.nextLine();
        Livro livro = sistema.buscarLivroPorIsbn(isbn);
        
        if (livro != null) {
            System.out.println("\nüìö Livro encontrado:");
            System.out.println(livro);
        } else {
            System.out.println("‚ùå Livro n√£o encontrado!");
        }
    }
    
    private void buscarLivrosPorTitulo() {
        System.out.print("Digite parte do t√≠tulo: ");
        String titulo = scanner.nextLine();
        List<Livro> livros = sistema.buscarLivrosPorTitulo(titulo);
        
        if (livros.isEmpty()) {
            System.out.println("‚ùå Nenhum livro encontrado!");
        } else {
            System.out.println("\nüìö Livros encontrados:");
            for (Livro livro : livros) {
                System.out.println(livro);
            }
        }
    }
    
    private void listarLivrosDisponiveis() {
        List<Livro> livros = sistema.consultarLivrosDisponiveis();
        
        if (livros.isEmpty()) {
            System.out.println("‚ùå Nenhum livro dispon√≠vel no momento!");
        } else {
            System.out.println("\nüìö Livros dispon√≠veis:");
            for (Livro livro : livros) {
                System.out.println(livro);
            }
        }
    }
    
    private void listarTodosLivros() {
        List<Livro> livros = sistema.listarTodosLivros();
        
        if (livros.isEmpty()) {
            System.out.println("‚ùå Nenhum livro cadastrado!");
        } else {
            System.out.println("\nüìö Todos os livros:");
            for (Livro livro : livros) {
                System.out.println(livro);
            }
        }
    }
    
    private void listarTodosUsuarios() {
        List<Usuario> usuarios = sistema.listarTodosUsuarios();
        
        if (usuarios.isEmpty()) {
            System.out.println("‚ùå Nenhum usu√°rio cadastrado!");
        } else {
            System.out.println("\nüë• Todos os usu√°rios:");
            for (Usuario usuario : usuarios) {
                System.out.println(usuario + 
                    " | Limite: " + usuario.getLimiteEmprestimos() + " livros" +
                    " | Prazo: " + usuario.getPrazoEmprestimo() + " dias");
            }
        }
    }
    
    // ========== M√âTODOS DE EMPR√âSTIMO E DEVOLU√á√ÉO ==========
    
    private void realizarEmprestimo() {
        System.out.println("\n--- REALIZAR EMPR√âSTIMO ---");
        System.out.print("Matr√≠cula do usu√°rio: ");
        String matricula = scanner.nextLine();
        
        System.out.print("Quantos livros deseja emprestar? ");
        int quantidade = lerInteiro();
        
        List<String> isbns = new ArrayList<>();
        for (int i = 1; i <= quantidade; i++) {
            System.out.print("ISBN do livro " + i + ": ");
            isbns.add(scanner.nextLine());
        }
        
        String resultado = sistema.realizarEmprestimo(matricula, isbns);
        System.out.println(resultado.startsWith("Empr√©stimo realizado") ? "‚úÖ " + resultado : "‚ùå " + resultado);
    }
    
    private void realizarDevolucao() {
        System.out.println("\n--- REALIZAR DEVOLU√á√ÉO ---");
        System.out.print("N√∫mero do empr√©stimo: ");
        int numero = lerInteiro();
        
        String resultado = sistema.realizarDevolucao(numero);
        System.out.println(resultado.startsWith("Devolu√ß√£o realizada") ? "‚úÖ " + resultado : "‚ùå " + resultado);
    }
    
    private void listarEmprestimosAtivos() {
        List<Emprestimo> emprestimos = sistema.listarEmprestimosAtivos();
        
        if (emprestimos.isEmpty()) {
            System.out.println("‚ùå Nenhum empr√©stimo ativo!");
        } else {
            System.out.println("\nüìã Empr√©stimos ativos:");
            for (Emprestimo emp : emprestimos) {
                System.out.println(emp);
                System.out.println("   Livros: " + emp.getLivros().stream()
                    .map(Livro::getTitulo)
                    .collect(Collectors.joining(", ")));
            }
        }
    }
    
    private void listarEmprestimosPorUsuario() {
        System.out.print("Matr√≠cula do usu√°rio: ");
        String matricula = scanner.nextLine();
        
        List<Emprestimo> emprestimos = sistema.listarEmprestimosPorUsuario(matricula);
        
        if (emprestimos.isEmpty()) {
            System.out.println("‚ùå Nenhum empr√©stimo encontrado para este usu√°rio!");
        } else {
            System.out.println("\nüìã Empr√©stimos do usu√°rio:");
            for (Emprestimo emp : emprestimos) {
                System.out.println(emp);
            }
        }
    }
    
    private void listarEmprestimosAtrasados() {
        List<Emprestimo> atrasados = sistema.listarEmprestimosAtrasados();
        
        if (atrasados.isEmpty()) {
            System.out.println("‚úÖ Nenhum empr√©stimo em atraso!");
        } else {
            System.out.println("\n‚ö†Ô∏è Empr√©stimos atrasados:");
            for (Emprestimo emp : atrasados) {
                System.out.println(emp);
            }
        }
    }
    
    private void exibirEstatisticas() {
        System.out.println("\nüìä ESTAT√çSTICAS GERAIS");
        System.out.println(criarLinha("=", 30));
        System.out.println("Total de livros: " + sistema.listarTodosLivros().size());
        System.out.println("Livros dispon√≠veis: " + sistema.consultarLivrosDisponiveis().size());
        System.out.println("Total de usu√°rios: " + sistema.listarTodosUsuarios().size());
        System.out.println("Empr√©stimos ativos: " + sistema.listarEmprestimosAtivos().size());
        System.out.println("Empr√©stimos atrasados: " + sistema.listarEmprestimosAtrasados().size());
    }
    
    // ========== M√âTODOS AUXILIARES ==========
    
    /**
     * L√™ uma op√ß√£o do usu√°rio (n√∫mero inteiro)
     */
    private int lerOpcao() {
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Retorna valor inv√°lido para tratar no switch
        }
    }
    
    /**
     * L√™ um n√∫mero inteiro do usu√°rio com valida√ß√£o
     */
    private int lerInteiro() {
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.print("Por favor, digite um n√∫mero v√°lido: ");
            }
        }
    }
    
    /**
     * Cria uma linha de caracteres repetidos (compat√≠vel com Java 8)
     * Substitui o m√©todo String.repeat() que s√≥ existe no Java 11+
     */
    private String criarLinha(String caractere, int quantidade) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < quantidade; i++) {
            sb.append(caractere);
        }
        return sb.toString();
    }
}